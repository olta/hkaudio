From 16a187a16f3bc6cb9b60585692354b11ee8070d7 Mon Sep 17 00:00:00 2001
From: Oliver Tappe <zooey@hirschkaefer.de>
Date: Sat, 22 Feb 2025 09:42:04 +0000
Subject: [PATCH] Support different output formats in ALSA driver, too.

---
 output/driver-alsa.go | 54 ++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 51 insertions(+), 3 deletions(-)

diff --git a/output/driver-alsa.go b/output/driver-alsa.go
index dc145ac..737175c 100644
--- a/output/driver-alsa.go
+++ b/output/driver-alsa.go
@@ -8,9 +8,11 @@ package output
 //
 import "C"
 import (
+	"encoding/binary"
 	"errors"
 	"fmt"
 	"io"
+	"math"
 	"os/exec"
 	"sync"
 	"time"
@@ -56,6 +58,9 @@ type alsaOutput struct {
 
 	volumeUpdate chan float32
 	err          chan error
+
+	transform func([]float32, []byte) int
+	format    string
 }
 
 func newAlsaOutput(opts *NewOutputOptions) (*alsaOutput, error) {
@@ -94,6 +99,36 @@ func newAlsaOutput(opts *NewOutputOptions) (*alsaOutput, error) {
 		out.log.WithError(err).Warnf("failed setting up output device mixer")
 	}
 
+	switch opts.OutputPipeFormat {
+	case "s16le":
+		out.transform = func(in []float32, out []byte) int {
+			for i := 0; i < len(in); i++ {
+				sample := int16(in[i] * 32767)
+				binary.LittleEndian.PutUint16(out[i*2:], uint16(sample))
+			}
+			return len(in) * 2
+		}
+	case "s32le":
+		out.transform = func(in []float32, out []byte) int {
+			for i := 0; i < len(in); i++ {
+				sample := int32(in[i] * 2147483647)
+				binary.LittleEndian.PutUint32(out[i*4:], uint32(sample))
+			}
+			return len(in) * 4
+		}
+	case "f32le":
+		out.transform = func(in []float32, out []byte) int {
+			for i := 0; i < len(in); i++ {
+				sample := math.Float32bits(in[i])
+				binary.LittleEndian.PutUint32(out[i*4:], sample)
+			}
+			return len(in) * 4
+		}
+	default:
+		return nil, fmt.Errorf("unknown output pipe format: %s", opts.OutputPipeFormat)
+	}
+	out.format = opts.OutputPipeFormat
+
 	return out, nil
 }
 
@@ -126,8 +161,19 @@ func (out *alsaOutput) setupPcm() error {
 		return out.alsaError("snd_pcm_hw_params_set_access", err)
 	}
 
-	if err := C.snd_pcm_hw_params_set_format(out.pcmHandle, hwparams, C.SND_PCM_FORMAT_FLOAT_LE); err < 0 {
-		return out.alsaError("snd_pcm_hw_params_set_format", err)
+	switch out.format {
+	case "s16le":
+		if err := C.snd_pcm_hw_params_set_format(out.pcmHandle, hwparams, C.SND_PCM_FORMAT_S16_LE); err < 0 {
+			return out.alsaError("snd_pcm_hw_params_set_format", err)
+		}
+	case "s32le":
+		if err := C.snd_pcm_hw_params_set_format(out.pcmHandle, hwparams, C.SND_PCM_FORMAT_S32_LE); err < 0 {
+			return out.alsaError("snd_pcm_hw_params_set_format", err)
+		}
+	case "f32le":
+		if err := C.snd_pcm_hw_params_set_format(out.pcmHandle, hwparams, C.SND_PCM_FORMAT_FLOAT_LE); err < 0 {
+			return out.alsaError("snd_pcm_hw_params_set_format", err)
+		}
 	}
 
 	if err := C.snd_pcm_hw_params_set_channels(out.pcmHandle, hwparams, C.unsigned(out.channels)); err < 0 {
@@ -250,6 +296,7 @@ func (out *alsaOutput) logParams(params *C.snd_pcm_hw_params_t) error {
 
 func (out *alsaOutput) outputLoop(pcmHandle *C.snd_pcm_t) {
 	floats := make([]float32, out.channels*out.periodSize)
+	bytes := make([]byte, 4*len(floats)) // times four is the biggest we can get
 
 	for {
 		// Calculate how long we should wait until there's enough space in the
@@ -303,7 +350,8 @@ func (out *alsaOutput) outputLoop(pcmHandle *C.snd_pcm_t) {
 		// be very fast. It might be delayed a bit however if the sleep above
 		// didn't sleep long enough to wait for room in the buffer.
 		if n > 0 {
-			if nn := C.snd_pcm_writei(pcmHandle, unsafe.Pointer(&floats[0]), C.snd_pcm_uframes_t(n/out.channels)); nn < 0 {
+			out.transform(floats[:n], bytes)
+			if nn := C.snd_pcm_writei(pcmHandle, unsafe.Pointer(&bytes[0]), C.snd_pcm_uframes_t(n/out.channels)); nn < 0 {
 				// Got an error, so must recover (even for an underrun).
 				errCode := C.snd_pcm_recover(pcmHandle, C.int(nn), 1)
 				if errCode < 0 {
-- 
2.25.1

