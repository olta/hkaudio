From 99630a0f6373416e7562bf2dd5ea1114b7441f5a Mon Sep 17 00:00:00 2001
From: Oliver Tappe <zooey@hirschkaefer.de>
Date: Sun, 22 Dec 2024 14:22:17 +0100
Subject: [PATCH] Add resource management check to pause playback.

---
 playback/src/player.rs | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/playback/src/player.rs b/playback/src/player.rs
index 43f6361..392ac70 100644
--- a/playback/src/player.rs
+++ b/playback/src/player.rs
@@ -1,6 +1,7 @@
 use std::{
     collections::HashMap,
     fmt,
+    fs,
     future::Future,
     io::{self, Read, Seek, SeekFrom},
     mem,
@@ -12,7 +13,7 @@ use std::{
     },
     task::{Context, Poll},
     thread,
-    time::{Duration, Instant},
+    time::{Duration, Instant, SystemTime},
 };
 
 use futures_util::{
@@ -85,6 +86,8 @@ struct PlayerInternal {
 
     player_id: usize,
     play_request_id_generator: SeqGenerator<u64>,
+    
+    last_resource_check_time: SystemTime,
 }
 
 static PLAYER_COUNTER: AtomicUsize = AtomicUsize::new(0);
@@ -477,6 +480,8 @@ impl Player {
 
                 player_id,
                 play_request_id_generator: SeqGenerator::new(0),
+                
+                last_resource_check_time: SystemTime::UNIX_EPOCH,
             };
 
             // While PlayerInternal is written as a future, it still contains blocking code.
@@ -1666,6 +1671,13 @@ impl PlayerInternal {
                         error!("{}", e);
                         self.handle_pause();
                     }
+                    
+                    if SystemTime::now().duration_since(self.last_resource_check_time).unwrap().as_millis() > 500 {
+                        if fs::metadata("/run/res-man/stop.librespot").is_ok() {
+                            self.handle_pause();
+                        }
+                        self.last_resource_check_time = SystemTime::now();
+                    }
                 }
             }
 
-- 
2.25.1

